language: cpp

dist: bionic

matrix:
  fast_finish: true
  include:
    - os: linux
      arch: amd64
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - autoconf-archive
            - cmake
            - doxygen
            - graphviz
            - lcov
      env:
        - MATRIX_EVAL="SUDO=sudo && MAKE=make && OPTS='--enable-code-coverage'"
    - os: linux
      arch: ppc64le
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - autoconf-archive
            - cmake
            - lcov
      env:
        - MATRIX_EVAL="SUDO=sudo && MAKE=make"
    - os: linux
      arch: s390x
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - autoconf-archive
            - cmake
            - lcov
      env:
        - MATRIX_EVAL="SUDO=sudo && MAKE=make"
    - os: linux
      arch: arm64
      sudo: required
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - autoconf-archive
            - cmake
            - lcov
      env:
        - MATRIX_EVAL="SUDO=sudo && MAKE=make"
    - os: osx
      osx_image: xcode11.3
      addons:
        homebrew:
          packages:
            - autoconf-archive
      env:
        - MATRIX_EVAL="SUDO=sudo && MAKE=make"
    - os: windows
  allow_failures:
  - os: windows
    if: tag IS blank
  - os: osx
    if: tag IS blank

before_install:
- |-
    case $TRAVIS_OS_NAME in
      linux)
        eval "${MATRIX_EVAL}"
        ;;
      osx)
        eval "${MATRIX_EVAL}"
        ;;
      windows)
        [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
        choco uninstall -y mingw
        choco upgrade --no-progress -y msys2
        export msys2='cmd //C RefreshEnv.cmd '
        export msys2+='& set MSYS=winsymlinks:nativestrict '
        export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
        export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
        export msys2+=" -msys2 -c "\"\$@"\" --"
        $msys2 pacman --sync --noconfirm --needed mingw-w64-x86_64-toolchain
        ## Install more MSYS2 packages from https://packages.msys2.org/base here
        taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
        export PATH=/C/tools/msys64/mingw64/bin:$PATH
        export MAKE=mingw32-make  # so that Autotools can find it
        ;;
    esac

before_script:
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then ${SUDO} sh .scripts/build-and-install-libgtest-libraries.sh; fi

script:
  - autoreconf -vfi
  - ./configure ${OPTS}
  - make -j`nproc --all`
  - make check
  - ${SUDO} ${MAKE} -j`nproc --all` install
  - # ensure a simple application can compile and link to libcrcx
  - echo 'extern void crcx_init(); int main() { crcx_init(); return 0; }' > foo.c
  - ${CC} -o foo foo.c `pkg-config --cflags --libs crcx`
  - # ensure a simple application can compile and link to libcrcxxx
  - echo '#include <crc3x/crc3x.h>' > foo.cpp
  - echo 'using namespace ::crc3x; int main() { using Crc3x = Crc<uint8_t,8,7>; Crc3x crc(0,0,false,false); return 0; }' >> foo.cpp
  - ${CXX} -std=c++17 -o foo foo.cpp `pkg-config --cflags --libs crc3x`

after_success:
  - bash <(curl -s https://codecov.io/bash)

deploy:
  provider: pages
  skip_cleanup: true
  github_token: $GH_TOKEN
  keep_history: true
  on:
    tags: true
    condition:
      - $TRAVIS_OS_NAME = linux
      - $TRAVIS_CPU_ARCH = amd64
  local_dir: docs/html

notifications:
  email: false
